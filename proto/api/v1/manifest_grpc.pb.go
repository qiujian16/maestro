// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/manifest.proto

package v1

import (
	context "context"
	pb "github.com/cloudevents/sdk-go/binding/format/protobuf/v2/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloudEventsService_Send_FullMethodName  = "/v1.CloudEventsService/Send"
	CloudEventsService_Watch_FullMethodName = "/v1.CloudEventsService/Watch"
)

// CloudEventsServiceClient is the client API for CloudEventsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudEventsServiceClient interface {
	Send(ctx context.Context, in *pb.CloudEvent, opts ...grpc.CallOption) (*CloudEventSendResponse, error)
	Watch(ctx context.Context, in *ResourceWatchRequest, opts ...grpc.CallOption) (CloudEventsService_WatchClient, error)
}

type cloudEventsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudEventsServiceClient(cc grpc.ClientConnInterface) CloudEventsServiceClient {
	return &cloudEventsServiceClient{cc}
}

func (c *cloudEventsServiceClient) Send(ctx context.Context, in *pb.CloudEvent, opts ...grpc.CallOption) (*CloudEventSendResponse, error) {
	out := new(CloudEventSendResponse)
	err := c.cc.Invoke(ctx, CloudEventsService_Send_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudEventsServiceClient) Watch(ctx context.Context, in *ResourceWatchRequest, opts ...grpc.CallOption) (CloudEventsService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &CloudEventsService_ServiceDesc.Streams[0], CloudEventsService_Watch_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudEventsServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudEventsService_WatchClient interface {
	Recv() (*pb.CloudEvent, error)
	grpc.ClientStream
}

type cloudEventsServiceWatchClient struct {
	grpc.ClientStream
}

func (x *cloudEventsServiceWatchClient) Recv() (*pb.CloudEvent, error) {
	m := new(pb.CloudEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CloudEventsServiceServer is the server API for CloudEventsService service.
// All implementations must embed UnimplementedCloudEventsServiceServer
// for forward compatibility
type CloudEventsServiceServer interface {
	Send(context.Context, *pb.CloudEvent) (*CloudEventSendResponse, error)
	Watch(*ResourceWatchRequest, CloudEventsService_WatchServer) error
	mustEmbedUnimplementedCloudEventsServiceServer()
}

// UnimplementedCloudEventsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudEventsServiceServer struct {
}

func (UnimplementedCloudEventsServiceServer) Send(context.Context, *pb.CloudEvent) (*CloudEventSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedCloudEventsServiceServer) Watch(*ResourceWatchRequest, CloudEventsService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedCloudEventsServiceServer) mustEmbedUnimplementedCloudEventsServiceServer() {}

// UnsafeCloudEventsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudEventsServiceServer will
// result in compilation errors.
type UnsafeCloudEventsServiceServer interface {
	mustEmbedUnimplementedCloudEventsServiceServer()
}

func RegisterCloudEventsServiceServer(s grpc.ServiceRegistrar, srv CloudEventsServiceServer) {
	s.RegisterService(&CloudEventsService_ServiceDesc, srv)
}

func _CloudEventsService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.CloudEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudEventsServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudEventsService_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudEventsServiceServer).Send(ctx, req.(*pb.CloudEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudEventsService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResourceWatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudEventsServiceServer).Watch(m, &cloudEventsServiceWatchServer{stream})
}

type CloudEventsService_WatchServer interface {
	Send(*pb.CloudEvent) error
	grpc.ServerStream
}

type cloudEventsServiceWatchServer struct {
	grpc.ServerStream
}

func (x *cloudEventsServiceWatchServer) Send(m *pb.CloudEvent) error {
	return x.ServerStream.SendMsg(m)
}

// CloudEventsService_ServiceDesc is the grpc.ServiceDesc for CloudEventsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudEventsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.CloudEventsService",
	HandlerType: (*CloudEventsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _CloudEventsService_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _CloudEventsService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/manifest.proto",
}
